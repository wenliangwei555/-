<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.baisee.oa.dao.baisee.BaiseeRoleMapper">
	<resultMap id="BaseResultMap" type="cn.baisee.oa.model.BaiseeRole">
		<id column="ROLE_ID" property="roleId" jdbcType="VARCHAR" />
		<result column="ROLE_NAME" property="roleName" jdbcType="VARCHAR" />
		<result column="CREATE_USER" property="createUser" jdbcType="VARCHAR" />
		<result column="UPDATE_USER" property="updateUser" jdbcType="VARCHAR" />
		<result column="ROLE_LEVEL" property="roleLevel" jdbcType="INTEGER" />
		<result column="UPDATE_TIME" property="updateTime" jdbcType="VARCHAR" />
	</resultMap>
	<sql id="Base_Column_List">
		ROLE_ID, ROLE_NAME, CREATE_USER, UPDATE_USER, ROLE_LEVEL, UPDATE_TIME
	</sql>
	<sql id="BaseWhere">
		<where>
			<if test="roleId != null">
				and ROLE_ID = #{roleId,jdbcType=VARCHAR}
			</if>
			<if test="roleName != null">
				and ROLE_NAME = #{roleName,jdbcType=VARCHAR}
			</if>
			<if test="createUser != null">
				and CREATE_USER = #{createUser,jdbcType=VARCHAR}
			</if>
			<if test="updateUser != null">
				and UPDATE_USER = #{updateUser,jdbcType=VARCHAR}
			</if>
			<if test="roleLevel != null and roleLevel != 0">
				and ROLE_LEVEL = #{roleLevel,jdbcType=INTEGER}
			</if>
			<if test="updateTime != null">
				and UPDATE_TIME = #{updateTime,jdbcType=VARCHAR}
			</if>
		</where>
	</sql>

	<resultMap id="RoleListResultMap" type="cn.baisee.oa.model.BaiseeRole">
		<id column="ROLE_ID" property="roleId" jdbcType="VARCHAR" />
		<result column="ROLE_NAME" property="roleName" jdbcType="VARCHAR" />
		<result column="ROLE_LEVEL" property="roleLevel" jdbcType="INTEGER" />
		<result column="UPDATE_TIME" property="updateTime" jdbcType="VARCHAR" />
		<result column="CREATE_USER" property="createUser" jdbcType="VARCHAR" />
		<result column="UPDATE_USER" property="updateUser" jdbcType="VARCHAR" />
		<association property="createUserInfo" resultMap="CreateUserMap"></association>
		<association property="updateUserInfo" resultMap="UpdateUserMap"></association>
	</resultMap>

	<resultMap id="UpdateUserMap" type="cn.baisee.oa.model.BaiseeUser">
		<id column="UPD_USER_ID" jdbcType="VARCHAR" property="userId" />
		<result column="UPD_USER_NAME" jdbcType="VARCHAR" property="userName" />
	</resultMap>

	<resultMap id="CreateUserMap" type="cn.baisee.oa.model.BaiseeUser">
		<id column="CREATE_USER_ID" jdbcType="VARCHAR" property="userId" />
		<result column="CREATE_USER_NAME" jdbcType="VARCHAR" property="userName" />
	</resultMap>

	<select id="selectAll" resultMap="RoleListResultMap" parameterType="cn.baisee.oa.model.BaiseeRoleQueryEntity">
		SELECT DISTINCT
		R.ROLE_ID, R.ROLE_NAME, R.CREATE_USER, R.UPDATE_USER, R.ROLE_LEVEL, R.UPDATE_TIME, CU.USER_ID AS CREATE_USER_ID, CU.USER_NAME AS CREATE_USER_NAME, UU.USER_ID AS
		UPD_USER_ID, UU.USER_NAME AS UPD_USER_NAME
		from baisee_role R
		LEFT JOIN baisee_user CU
		ON CU.USER_ID = R.CREATE_USER
		LEFT JOIN baisee_user UU
		ON UU.USER_ID = R.UPDATE_USER
		<where>
			<if test="roleName != null and roleName != ''">
				(ROLE_NAME LIKE '%${roleName}%'
				OR UU.USER_NAME LIKE '%${roleName}%'
				OR CU.USER_NAME LIKE '%${roleName}%')
			</if>
			<if test="userIds != null and userIds.size() > 0">
				AND R.CREATE_USER IN
				<foreach collection="userIds" item="uId" open="(" separator="," close=")">
					#{uId, jdbcType=VARCHAR}
				</foreach>
			</if>
		</where>
		ORDER BY UPDATE_TIME DESC
	</select>

	<select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from baisee_role
		where ROLE_ID = #{roleId,jdbcType=VARCHAR}
	</select>

	<select id="selectByName" resultMap="BaseResultMap" parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from baisee_role
		where ROLE_Name = #{roleName,jdbcType=VARCHAR}
	</select>

	<select id="selectCountByName" resultType="int" parameterType="map">
		SELECT
		COUNT(ROLE_ID)
		FROM baisee_role R
		<where>
			ROLE_NAME = #{roleInfo.roleName,jdbcType=VARCHAR}
			<if test="roleInfo != null and roleInfo.roleId != null and roleInfo.roleId != ''">
				AND ROLE_ID != #{roleId, jdbcType=VARCHAR}
			</if>
			<if test="userId != null and userId != ''">
				AND CREATE_USER = #{userId, jdbcType=VARCHAR}
			</if>
		</where>
	</select>

	<delete id="deleteByPrimaryKey" parameterType="java.lang.String">
		delete from baisee_role
		where ROLE_ID = #{roleId,jdbcType=VARCHAR}
	</delete>
	<insert id="insert" parameterType="cn.baisee.oa.model.BaiseeRole">
		insert into baisee_role (ROLE_ID, ROLE_NAME, CREATE_USER, UPDATE_USER, ROLE_LEVEL, UPDATE_TIME)
		values (#{roleId,jdbcType=VARCHAR},
		#{roleName,jdbcType=VARCHAR},
		#{createUser,jdbcType=VARCHAR},
		#{updateUser,jdbcType=VARCHAR},
		#{roleLevel,jdbcType=INTEGER},
		#{updateTime,jdbcType=VARCHAR}
		)
	</insert>
	<insert id="insertSelective" parameterType="cn.baisee.oa.model.BaiseeRole">
		insert into baisee_role
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="roleId != null">
				ROLE_ID,
			</if>
			<if test="roleName != null">
				ROLE_NAME,
			</if>
			<if test="createUser != null">
				CREATE_USER,
			</if>
			<if test="updateUser != null">
				UPDATE_USER,
			</if>
			<if test="roleLevel != null and roleLevel != 0">
				ROLE_LEVEL,
			</if>
			<if test="updateTime != null">
				UPDATE_TIME,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="roleId != null">
				#{roleId,jdbcType=VARCHAR},
			</if>
			<if test="roleName != null">
				#{roleName,jdbcType=VARCHAR},
			</if>
			<if test="createUser != null">
				#{createUser,jdbcType=VARCHAR}
			</if>
			<if test="updateUser != null">
				#{updateUser,jdbcType=VARCHAR}
			</if>
			<if test="roleLevel != null and roleLevel != 0">
				#{roleLevel,jdbcType=INTEGER}
			</if>
			<if test="updateTime != null">
				#{updateTime,jdbcType=VARCHAR}
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="cn.baisee.oa.model.BaiseeRole">
		update baisee_role
		<set>
			<if test="roleName != null">
				ROLE_NAME = #{roleName,jdbcType=VARCHAR},
			</if>
			<if test="createUser != null">
				CREATE_USER = #{createUser,jdbcType=VARCHAR},
			</if>
			<if test="updateUser != null">
				UPDATE_USER = #{updateUser,jdbcType=VARCHAR},
			</if>
			<if test="roleLevel != null and roleLevel != 0">
				ROLE_LEVEL = #{roleLevel,jdbcType=INTEGER},
			</if>
			<if test="updateTime != null">
				UPDATE_TIME = #{updateTime,jdbcType=VARCHAR},
			</if>
		</set>
		where ROLE_ID = #{roleId,jdbcType=VARCHAR}
	</update>
	<update id="updateByPrimaryKey" parameterType="cn.baisee.oa.model.BaiseeRole">
		update baisee_role
		set ROLE_NAME = #{roleName,jdbcType=VARCHAR},
		CREATE_USER = #{createUser,jdbcType=VARCHAR},
		ROLE_LEVEL =
		#{roleLevel,jdbcType=INTEGER},
		UPDATE_USER = #{updateUser,jdbcType=VARCHAR},
		UPDATE_TIME = #{updateTime,jdbcType=VARCHAR}
		where ROLE_ID = #{roleId,jdbcType=VARCHAR}
	</update>

	<select id="selectAllByCreateUser" resultMap="RoleListResultMap">
		SELECT
		R.ROLE_ID, R.ROLE_NAME, R.CREATE_USER, R.UPDATE_USER, R.ROLE_LEVEL, R.UPDATE_TIME,
		CU.USER_ID AS CREATE_USER_ID, CU.USER_NAME AS CREATE_USER_NAME, UU.USER_ID AS
		UPD_USER_ID,
		UU.USER_NAME AS UPD_USER_NAME
		from baisee_role R
		LEFT JOIN baisee_user CU
		ON CU.USER_ID =
		R.CREATE_USER
		LEFT JOIN baisee_user UU
		ON UU.USER_ID = R.UPDATE_USER
		<!-- <if test="list != null and list.size > 0">
			WHERE R.CREATE_USER in
				<foreach collection="list" item="cnum" separator="," open="(" close=")">
					#{cnum, jdbcType=VARCHAR}
				</foreach>
		</if> -->
       
	</select>
	<!-- 查询角色 -->
	<select id="selectAllRole" resultMap="RoleListResultMap" parameterType="map">
		SELECT
		R.ROLE_ID, R.ROLE_NAME, R.CREATE_USER, R.UPDATE_USER, R.ROLE_LEVEL, R.UPDATE_TIME,
		CU.USER_NAME AS CREATE_USER_NAME, UU.USER_NAME AS UPD_USER_NAME 
		from baisee_role R LEFT JOIN baisee_user CU 
		ON CU.USER_ID = R.CREATE_USER 
		LEFT JOIN baisee_user UU 
		ON UU.USER_ID=R.CREATE_USER
		<where>
			<if test="itemlableSearch != null">
				R.ROLE_NAME LIKE "%"#{itemlableSearch, jdbcType=VARCHAR}"%" OR
				CU.USER_NAME LIKE "%"#{itemlableSearch, jdbcType=VARCHAR}"%" OR
				UU.USER_NAME LIKE "%"#{itemlableSearch, jdbcType=VARCHAR}"%"
			</if>
		</where>
	</select>
	<!-- 删除角色 -->
	<delete id="delRole" parameterType="map">
		delete from baisee_role where ROLE_ID=#{roleId, jdbcType=VARCHAR}
	</delete>
	<!-- 批量删除角色 -->
	<delete id="delAllRole" parameterType="java.lang.String">
		<if test="array.length > 0">
			DELETE FROM baisee_role 
			<where>
				ROLE_ID in
				<foreach collection="array" open="(" close=")" item="roleId" separator="," >
					#{roleId, jdbcType=VARCHAR}
				</foreach>
			</where>
		</if>
	</delete>
	
	<insert id="insertRoleUser" parameterType="map">
		INSERT INTO baisee_role_user
		(USER_ID, ROLE_ID)
		VALUES(#{userId,jdbcType=VARCHAR}, #{roleId,jdbcType=VARCHAR});
	</insert>
	
	<delete id="deleteByUserIds" parameterType="list">
			DELETE FROM baisee_role_user
			<where>
				USER_ID in
				<foreach collection="list" open="(" close=")" item="item" separator=",">
						#{item}
					</foreach>
			</where>
	</delete>
	
</mapper>