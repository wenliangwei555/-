<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.baisee.oa.dao.baisee.BaiseeUserMapper">
	<resultMap id="BaseResultMap" type="cn.baisee.oa.model.BaiseeUser">
		<id column="USER_ID" jdbcType="VARCHAR" property="userId" />
		<result column="USER_NAME" jdbcType="VARCHAR" property="userName" />
		<result column="LOGIN_NAME" jdbcType="VARCHAR" property="loginName" />
		<result column="LOGIN_PWD" jdbcType="VARCHAR" property="loginPwd" />
		<result column="LAST_UPDATE_TIME" jdbcType="CHAR" property="lastUpdateTime" />
		<result column="STATUS" jdbcType="CHAR" property="status" />
		<result column="USER_TYPE" jdbcType="CHAR" property="userType" />
		<result column="CAN_DELETE" jdbcType="CHAR" property="canDelete" />
	</resultMap>
	
	<!-- 角色表resultMap -->
	<resultMap id="RoleResultMap" type="cn.baisee.oa.model.BaiseeRole">
		<id column="ROLE_ID" property="roleId" jdbcType="VARCHAR" />
		<result column="ROLE_NAME" property="roleName" jdbcType="VARCHAR" />
		<result column="CREATE_USER" property="createUser" jdbcType="VARCHAR" />
		<result column="UPDATE_USER" property="updateUser" jdbcType="VARCHAR" />
		<result column="ROLE_LEVEL" property="roleLevel" jdbcType="INTEGER" />
		<result column="UPDATE_TIME" property="updateTime" jdbcType="VARCHAR" />
	</resultMap>
	
	
	<resultMap type="cn.baisee.oa.model.empinfo.Employee" id="EmployeeResultMap" >
		<id column="EID" property="empId"/>
		<result column="E_NAME" property="empName"/>
		<result column="E_STATUS"  property="empStatus"/>
		<result column="E_GRADATION"  property="empDept"/>
	</resultMap>
	
	
	<sql id="Base_Column_List">
		USER_ID, USER_NAME, LOGIN_NAME, LOGIN_PWD,
		LAST_UPDATE_TIME, STATUS, USER_TYPE,
		CAN_DELETE 
	</sql>
	<select id="selectByPrimaryKey" parameterType="java.lang.String"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from baisee_user
		where USER_ID = #{userId,jdbcType=VARCHAR}
	</select>
	
	<select id="selectByLoginName" parameterType="java.lang.String"
		resultMap="BaseResultMap">
		SELECT
			<include refid="Base_Column_List" />
		FROM
			baisee_user
		WHERE login_name = #{userName, jdbcType=VARCHAR}
		LIMIT 0,1
	</select>
	
	<select id="selectAll" resultMap="BaseResultMap" parameterType="java.util.HashMap">
		select
		<include refid="Base_Column_List" />
		from baisee_user 
	</select>
	
	
	<update id="updateByPrimaryKey" parameterType="cn.baisee.oa.model.BaiseeUser">
		UPDATE 
		    baisee_user 
		SET
		    user_name = #{userName, jdbcType=VARCHAR},
		    login_name = #{loginName, jdbcType=VARCHAR},
		    login_pwd = #{loginPwd, jdbcType=VARCHAR},
		    last_update_time = #{lastUpdateTime, jdbcType=CHAR},
		    status = #{status, jdbcType=CHAR},
		    can_delete = #{canDelete, jdbcType=VARCHAR}
		WHERE user_id = #{userId, jdbcType=VARCHAR} 
	</update>
	
	<insert id="bashInsert" parameterType="list">
		<if test="list != null and list.size() > 0">
			INSERT INTO baisee_student 
		(SID,CID,S_NAME,MOBILE,S_ID_NUMBER,S_STATUS,S_TYPE,S_SCHOOL_STATUS,S_AUDITION_START_TIME,UPDATE_TIME)
	  		VALUES
		    <foreach collection="list" item="mainBill" separator=",">  
		    	(
		    		pkval('STID'),
					#{mainBill.classNo, jdbcType=VARCHAR},
					#{mainBill.name},
					#{mainBill.mobile},
					#{mainBill.certNo},
					'0',
					'0',
					'0',
					#{mainBill.auditionStartDate},
					DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')
		    	)
		    </foreach>
	    </if>
  	</insert>

	<!-- 查询分页 显示-->
	<select id="selectUserAll" resultMap="BaseResultMap" parameterType="map">
		SELECT
			*
		FROM
			baisee_user
			<where>
				<if test="userName != null">
					USER_NAME LIKE "%"#{userName}"%"
				</if>
			</where>
		ORDER BY LAST_UPDATE_TIME DESC
	</select>
	<!-- ===========================================================添加数据========================  -->
	<!-- 添加一条数据 -->
	<insert id="addUser" parameterType="cn.baisee.oa.model.BaiseeUser" >
		INSERT INTO baisee_user 
			<trim prefix="("  suffixOverrides="," suffix=")">
				<if test="userId != null">
					USER_ID,
				</if>
				<if test="userName != null">
					USER_NAME,
				</if>
				<if test="loginName != null">
					LOGIN_NAME,
				</if>
				<if test="loginPwd != null">
					LOGIN_PWD,
				</if>
				<if test="status != null">
					STATUS,
				</if>
				<if test="userType != ''">
					USER_TYPE,
				</if>
				<if test="canDelete != null">
					CAN_DELETE,
				</if>
				LAST_UPDATE_TIME
			</trim>
			<trim prefix="VALUES (" suffixOverrides="," suffix=")">
				<if test="userId != null">
					#{userId },
				</if>
				<if test="userName != null">
					#{userName},
				</if>
				<if test="loginName != null">
					#{loginName},
				</if>
				<if test="loginPwd != null">
					#{loginPwd},
				</if>
				<if test="status != null">
					#{status},
				</if>
				<if test="userType != ''">
					#{userType},
				</if>
				<if test="canDelete != null">
					#{canDelete},
				</if>
				DATE_FORMAT(now(),'%Y%m%d%h%i%s')
			</trim>
	</insert>
	<!-- 添加该用户的登录权限 -->
	<insert id="addUserLoginJurisdiction" parameterType="map">
		INSERT INTO 
			baisee_role_user (USER_ID, ROLE_ID)
		VALUES
			(#{map.empId}, '1')
	</insert>
	
	
	<!-- ===============================修改数据=========================================================== -->
	<!-- 修改一条数据 -->
	<update id="updateUserByID" parameterType="cn.baisee.oa.model.BaiseeUser">
		UPDATE baisee_user
		<set>
			<if test="userName != null">
				USER_NAME = #{userName},
			</if>
			<if test="loginName != null">
				 LOGIN_NAME = #{loginName},
			</if>
			<if test="loginPwd != null">
				LOGIN_PWD = #{loginPwd},
			</if>
			<if test="status != null">
				STATUS = #{status},
			</if>
			<if test="userType != ''">
				USER_TYPE = #{userType},
			</if>
			LAST_UPDATE_TIME = DATE_FORMAT(now(),'%Y%m%d%h%i%s')
		</set>
		where USER_ID = #{userId}
	</update>
	
	<delete id="deleteUserOfRole" parameterType="map">
		DELETE from baisee_role_user WHERE USER_ID = #{empId}
	</delete>
	
	
	
	<!-- 查询全选中可以删除的信息 -->
	<select id="selectUserToDelete" parameterType="java.lang.String" resultMap="BaseResultMap">
		SELECT
			*
		FROM
			baisee_user
			<where>
				<if test="array != null">
					CAN_DELETE != '1'  and USER_ID IN 
					<foreach collection="array" open="(" close=")" item="userId" separator=",">
						#{userId}
					</foreach>
				</if>
			</where>
	</select>
	<!-- 全选删除 -->
	<delete id="deleteUserToCheck" parameterType="list" >
		DELETE
		FROM
			baisee_user
			<where>
				<if test="list != null">
					USER_ID IN 
					<foreach collection="list" open="(" close=")" item="item" separator=",">
						#{item}
					</foreach>
				</if>
			</where>
	</delete>
	<!-- 删除用户角色权限 -->
	<delete id="deleteUserToCheckOfJurisdiction" parameterType="list">
		DELETE
		FROM
			baisee_role_user
			<where>
				<if test="list != null">
					USER_ID IN 
					<foreach collection="list" open="(" close=")" item="item" separator=",">
						#{item}
					</foreach>
				</if>
			</where>
	</delete>
	<!-- 查询所有的员工，在选择用户时方便回显 -->
	<select id="selectUserNames" resultMap="EmployeeResultMap" >
		SELECT 
		DISTINCT
			baisee_employee.EID,
			baisee_employee.E_NAME
		FROM
			baisee_employee
	</select>
	<!-- 校验用户数据库表中有没有现在选择的用户 -->
	<select id="VerificationEmpID" resultMap="BaseResultMap" parameterType="java.lang.String">
		SELECT
			*
		FROM
			baisee_user
		WHERE
			baisee_user.USER_ID = #{userId}
	</select>
	<!-- 查询此用户的详细信息,在新增用户时候 -->
	<select id="selectEmployeeByID" resultMap="EmployeeResultMap" parameterType="java.lang.String">
		SELECT
			E_NAME,
			E_STATUS,
		  E_GRADATION
		FROM
			baisee_employee
		WHERE
			baisee_employee.EID = #{empId}
	</select>
	<!-- 校验有没有此登录名称 -->
	<select id="VerificationLoginName" resultMap="BaseResultMap"  parameterType="cn.baisee.oa.model.BaiseeUser">
		SELECT
			*
		FROM
			baisee_user
			<where>
				<if test="loginName != null">
					LOGIN_NAME = #{loginName}
				</if>
				<if test="userId != null">
					AND USER_ID != #{userId}
				</if>
			</where>
	</select>
	<!-- ==================================查询此用户的角色名称======================================== -->
	<select id="selectRoleNameByUserId" parameterType="map" resultMap="RoleResultMap">
		SELECT
			baisee_role.ROLE_NAME ,baisee_role.ROLE_ID 
		FROM
			baisee_role,
			baisee_user,
			baisee_role_user
		WHERE
			baisee_role.ROLE_ID = baisee_role_user.ROLE_ID
		AND baisee_user.USER_ID = baisee_role_user.USER_ID
		AND baisee_user.USER_ID = #{empId}
	</select>
	
	
<!-- 判断要修改的原始密码输入的是否正确 -->
	<select id="selectUserByPwd" resultMap="BaseResultMap" parameterType="map">
		SELECT
			*
		FROM
			baisee_user
		where
			LOGIN_PWD = #{oldPassword}
		AND USER_ID = #{userId}
	</select>
	
	<update id="updateUserPwdById" parameterType="map">
		UPDATE  
		    baisee_user 
		SET
		    LOGIN_PWD = #{newPassword, jdbcType=VARCHAR}
		WHERE USER_ID = #{userId, jdbcType=VARCHAR} 
	</update>
	
	<!--  根据员工id删除用户角色关联表里面信息 -->
	<delete id="deleteRoleUserById" parameterType="java.lang.String" >
		DELETE 
			FROM
				baisee_role_user 
			<where>
				<if test="empId != null and empId != '' ">
					USER_ID = #{empId,jdbcType=VARCHAR}
				</if>
			</where>
	</delete>	


	<select id="createId" parameterType="String" resultType="String">
		select pkval(#{prefix})
	</select>
	
	<select id="statusUserType"  resultMap="BaseResultMap" parameterType="map">
		SELECT 
		*
		FROM baisee_user
		<where>
				AND STATUS = '1' 
			<if test="userType == null or userType == ''">
				AND USER_TYPE in (0,1)
			</if>
			<if test="userType != null and userType != ''">
				AND USER_TYPE=#{userType}
			</if>
			
		</where>
	</select>

	<select id="selectUserAllByType" parameterType="map" resultMap="BaseResultMap">
		SELECT
			USER_ID, LOGIN_NAME, LOGIN_PWD, LAST_UPDATE_TIME, STATUS, USER_TYPE, CAN_DELETE, 
		case
			USER_TYPE when '0' then concat(USER_NAME, '(初中)')
		else concat(USER_NAME,
		'(高中)')
		end as USER_NAME
		FROM
			baisee_user 
			<where>
				1=1
				<if test="userType != null and userType != ''">
					and USER_TYPE = #{userType}
				</if>
			</where>
	</select>
	
	<select id="selectUserList" resultMap="BaseResultMap">
		SELECT
			USER_ID, LOGIN_NAME, LOGIN_PWD, LAST_UPDATE_TIME, STATUS, USER_TYPE, CAN_DELETE, 
		case
			USER_TYPE when '0' then concat(USER_NAME, '(初中)')
		else concat(USER_NAME,
		'(高中)')
		end as USER_NAME
		FROM
			baisee_user 
	</select>
	<!--selectUserByRoleId根据权限角色ID查询所拥有这个角色的人  -->
	<select id="selectUserByRoleId" parameterType="String" resultType="String">
	SELECT USER_ID from baisee_role_user WHERE ROLE_ID=#{roleID,jdbcType=VARCHAR}
	</select>

	<!-- ==================================查询该角色下的所有用户======================================== -->
	<select id="findUsersByRoleId" parameterType="java.lang.String" resultMap="BaseResultMap">
		SELECT
			baisee_user.USER_ID ,baisee_user.USER_NAME 
		FROM
			baisee_role,
			baisee_user,
			baisee_role_user
		WHERE
			baisee_role.ROLE_ID = baisee_role_user.ROLE_ID
		AND baisee_user.USER_ID = baisee_role_user.USER_ID
		AND baisee_role.ROLE_ID = #{roleId}
	</select>

</mapper>