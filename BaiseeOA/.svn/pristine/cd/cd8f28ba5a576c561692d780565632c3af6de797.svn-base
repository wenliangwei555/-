package cn.baisee.oa.controller;

import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import cn.baisee.oa.annotation.Role;
import cn.baisee.oa.dao.baisee.BaiseeClazzMapper;
import cn.baisee.oa.dao.baisee.BaiseeEmployeeMapper;
import cn.baisee.oa.dao.baisee.BaiseeUserMapper;
import cn.baisee.oa.exception.OAServiceException;
import cn.baisee.oa.model.BaiseeClazz;
import cn.baisee.oa.model.BaiseeUser;
import cn.baisee.oa.model.evaluate.BaiseeStuEva;
import cn.baisee.oa.model.evaluate.BaiseeStuEvaone;
import cn.baisee.oa.model.evaluate.EvaAndControl;
import cn.baisee.oa.model.evaluate.EvaGenTeb;
import cn.baisee.oa.model.evaluate.Problem;
import cn.baisee.oa.page.pagehelper.PageInfo;
import cn.baisee.oa.service.ClazzService;
import cn.baisee.oa.service.StuEvaluateService;
import cn.baisee.oa.utils.ParamUtils;
import cn.baisee.oa.utils.SessionUtil;

/**
 * 学生评价Controller
 * 
 * @author yzk
 *
 */
@Controller
@RequestMapping(value = "eva")
public class StuEvaluateController {
	@Autowired
	private StuEvaluateService stuEvaService;
	
	@Autowired
	private ClazzService clazzService;
	
	@Autowired
	private BaiseeClazzMapper clazzMapper;
	
	@Autowired
	private BaiseeEmployeeMapper empMapper;

	@Autowired
	private BaiseeUserMapper userMapper;
	
	/**
	 * wo查看评价表下面每个问题的答案比率
	 * @param request
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/getEvapro")
	@Role(value = "XSPJ")
	public ModelAndView selectEvapro(HttpServletRequest request,String ecid,String evaName) throws Exception {
		ModelAndView model =new ModelAndView();
	  List<Problem> list = stuEvaService.selectEvapro(ecid);
	    stuEvaService.updateState(ecid);
		model.addObject("pageResult", list);
		model.addObject("evaName", evaName);
		model.setViewName("evaluate/evaluate_statistics");
		return model;
	}
	
	/**
	 * wo查看评价表下面每个问题的答案比率
	 * @param request
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/getratioEvapro")
	@Role(value = "XSPJ")
	public ModelAndView selectratioEvapro(HttpServletRequest request) throws Exception {

		ModelAndView model =new ModelAndView();
		List<BaiseeStuEvaone> list = stuEvaService.selectratioEvapro(request);
		String classname = null;
		String titlename = null;
		String [] temStrings =  new String[4];
		for (int i = 0; i < temStrings.length; i++) {
			temStrings[i]="";
		}
		int [] num =  new int[4];
		for (int i = 0; i < num.length; i++) {
			num[i]=0;
		}
		for (int i = 0; i < list.size(); i++) {
			temStrings[i]=list.get(i).getContent();
			num[i]=list.get(i).getNumb();
			classname=list.get(i).getClassName();
			titlename=list.get(i).getTitleName();
			System.err.println("11111111111555555555555555555555");
			System.err.println(list.get(i).getContent());
			System.err.println(list.get(i).getNumb());
			System.err.println(temStrings[i]);
		}
		for (int i = 0; i < temStrings.length; i++) {
			System.err.println(temStrings[i]);
			System.err.println(num[i]);
		}

/*		com.alibaba.fastjson.JSON.toJSONString(temStrings);
		com.alibaba.fastjson.JSON.toJSONString(num);*/
		// com.alibaba.fastjson.JSON.toJSONString(list);
	/*	PageInfo<BaiseeStuEvaone> page = new PageInfo<BaiseeStuEvaone>(list);*/
		model.addObject("classname", classname);
		model.addObject("titlename", titlename);
		model.addObject("datax", temStrings);
		model.addObject("datay", num);
		//['1月','2月','3月','4月','5月','6月','7月','8月','9月','10月','11月','12月']
				
				
		model.setViewName("evaluate/evaluationdetails");
		return model;
	}
	
	
	/**
	 * wo查看评价表下面的学生的具体评价内容
	 * @param request
	 * @return
	 * @throws Exception
	 */
/*	@RequestMapping(value = "/getSidStuEva")
	@Role(value = "XSPJ")
	public ModelAndView getEverEvaPageList(HttpServletRequest request) throws Exception {

		ModelAndView model =new ModelAndView();
		List<BaiseeStuEva> list = stuEvaService.selectEverEvaPage(request);
		PageInfo<BaiseeStuEva> page = new PageInfo<BaiseeStuEva>(list);
		model.addObject("pageResult", page);
		model.setViewName("evaluate/stu_Eva_content");
		return model;
	}
	*/
	/**
	 * wo查看评价表下面的学生
	 * @param request
	 * @return
	 * @throws Exception
	 */
/*	@RequestMapping(value = "/getStuEvaList")
	@Role(value = "XSPJ")
	public ModelAndView getStuEvaList(HttpServletRequest request) throws Exception {

		
		ModelAndView model =new ModelAndView();
		List<BaiseeStuEva> list = stuEvaService.selectTitlEvaPage(request);
		PageInfo<BaiseeStuEva> page = new PageInfo<BaiseeStuEva>(list);
		model.addObject("pageResult", page);
		model.setViewName("evaluate/stu_ever_list");
		return model;
	}*/

	
	
	
	
	/**
	 * 查询该登录的老师管理的所有班级和评价信息
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/selectStuEvaPage")
	@Role(value = "XSPJ")
	public ModelAndView selectStuEvaPage(HttpServletRequest request) throws Exception {
		ModelAndView model=new ModelAndView("evaluate/stu_evaluate_list");
		int pageNum=ParamUtils.getPageNumParameters(request);
		int pageSize=ParamUtils.getPageSizeParameters(request);
		String state = ParamUtils.getParameter(request, "state");
		String claName = ParamUtils.getParameter(request, "claName");
		PageInfo<BaiseeStuEva> pageInfo = stuEvaService.selectStuEvaPage(pageNum, pageSize, state,claName);
		model.addObject("pageResult", pageInfo);
		model.addObject("state", state);
		model.addObject("claName", claName);
		return model;
		
	}
	
	@RequestMapping(value = "/selectStuEvaListPage")
	@Role(value = "XSPJ")
	public ModelAndView selectStuEvaListPage(HttpServletRequest request) throws Exception {
		return clazzService.getCla2(new BaiseeClazz(), request);
	}
	
	/**
	 * 添加评价信息
	 * @param request
	 * @param model
	 * @return*/
	 
	@RequestMapping(value ="/insertEvaInfo")
	@Role(value = "PJXX_TJPJXX")  /*添加评价信息*/
	public ModelAndView insertEvaInfo(HttpServletRequest request,ModelAndView model,Problem thesaurus) {
		int i ;
		String stID = ParamUtils.getParameter(request, "stID");	
		if(stID == null || "".equals(stID) || "0".equals(stID)) {
			i = stuEvaService.insertEvaInfo(request,thesaurus);   /*新增*/
		}else {
			i = stuEvaService.updateEvaInfo(request,thesaurus);   /*修改*/
		}
		if(i > 0) {
			model.setViewName("redirect:eva/selectTgesPage.ht");	
		}else {
			model.addObject("operationSuccess","添加失败");
			model.setViewName("redirect:eva/selectTgesPage.ht");
		}
		return model;
	}
	
	/**
	 * 分页查询所有问题的信息
	 * @param thesaurus
	 * @param request
	 * @param model
	 * @return
	 * @throws Exception 
	 */
	@RequestMapping(value = "/selectTgesPage")
	@Role(value="PJXX")
	public ModelAndView selectTgesPage(PageInfo<Problem> page,HttpServletRequest request,ModelAndView model) throws Exception {
		List<Problem> list = stuEvaService.selectTgesPage(request);
		page = new PageInfo<Problem>(list);
		String userType = SessionUtil.getUserInfo(request).getUserType();
		String[] cIds=(String[]) request.getSession().getAttribute("bsClass");
		Map<String, Object> map = new HashMap<>();
		map.put("cStatus", userType);   /*------*/
		map.put("userType", userType);  /*-------*/
		map.put("cIds", cIds);
		List<BaiseeClazz> list2 = clazzMapper.getCla1(map);  /*-----*/
		Map<String, String> map1 = new HashMap<>();
		List<BaiseeUser> empList = userMapper.statusUserType(map);  /*-----*/
		model.addObject("list", list2);
		model.addObject("empList", empList);
		model.addObject("evaInfo", new EvaGenTeb());
		model.addObject("pageResult", page);
		String resu = ParamUtils.getParameter(request, "resu");
		if("error".equals(resu)) {
			model.addObject("operationSuccess", "评价问题处于使用状态无法删除！");
		}
		model.setViewName("evaluate/set_sel_List");
		return model;
	}
	
	
	/**
	 * 分页查询所有问题表的信息
	 * @param thesaurus
	 * @param request
	 * @param model
	 * @return
	 * @throws Exception 
	 */
	@RequestMapping(value = "/selectListPage")
	@Role(value="PJXX")
	public ModelAndView selectListPage(PageInfo<EvaGenTeb> page,HttpServletRequest request,ModelAndView model) throws Exception {
		/*List<Problem> list = stuEvaService.selectTgesPage(request);
		page = new PageInfo<Problem>(list);
		model.addObject("pageResult", page);*/
		List<EvaGenTeb> list = stuEvaService.selectListPage(request);
		page = new PageInfo<>(list);
		model.addObject("pageResult", page);
		model.setViewName("evaluate/stu_Tges_list");
		return model;
	}
	
	/**
	 *跳到 添加评价页面
	 * @return
	 */
	@RequestMapping(value = "/toAddThes")
	@Role(value="PJXX_TJPJXX")
	public ModelAndView toAddThes(HttpServletRequest request,ModelAndView model) {
			String stid = ParamUtils.getParameter(request, "stID");
			Problem problem =null;
			if(stid != null && !"".equals(stid)) {
				problem = stuEvaService.getIdProblemInfo(request);
				model.addObject("pro",problem);
			}else {
				problem = new Problem();
				model.addObject("pro",problem);
			}
			/*String userType = SessionUtil.getUserInfo(request).getUserType();
			Map<String, Object> map = new HashMap<>();
			map.put("userType", userType);
			List<BaiseeClazz> cla = clazzMapper.getCla(map);
			model.addObject("list", cla);*/
			model.setViewName("evaluate/stu_Problem_Add");
		return model;
	}
	
	
	/**
	 * 详细生产评价表的内容
	 */
	@RequestMapping(value ="/toAddEvaGen")
	@Role(value="PJXX_TJPJXX")
	public ModelAndView toAddEvaGen(HttpServletRequest request) {
		ModelAndView model = new ModelAndView();
		List<Problem> list = stuEvaService.selectTgesPage(request);
		PageInfo<Problem> page = new PageInfo<Problem>(list);
		String userType = SessionUtil.getUserInfo(request).getUserType();
		String[] cIds=(String[]) request.getSession().getAttribute("bsClass");
		Map<String, Object> map = new HashMap<>();
		map.put("userType", userType);
		map.put("cIds", cIds);
		List<BaiseeClazz> list2 = clazzMapper.getCla(map);
		Map<String, String> map1 = new HashMap<>();
		/*List<Employee> empList = empMapper.selectEmployeePage(map1);*/
		List<BaiseeUser> empList = userMapper.statusUserType(map);
		model.addObject("list", list2);
		model.addObject("empList", empList);
		model.addObject("pageResult", page);
		
	
		EvaGenTeb genInfo = stuEvaService.getIdEvaGenInfo(request);
		List<Problem> proInfo  =null;
		if(genInfo != null) {
			proInfo  = stuEvaService.getSuIdProInfos(genInfo.getSuID());
		}
		model.addObject("evaInfo", genInfo);
		model.addObject("proInfo", proInfo);
		model.addObject("gID", genInfo.getSpID());
		model.addObject("suID", genInfo.getSuID());
		model.setViewName("evaluate/set_sel_List");
		return model;
	}
	
	
	/**
	 * 单个删除
	 * @return
	 */
	@RequestMapping(value = "/delThes")
	@ResponseBody
	@Role(value="PJXX_SCPJXX")
	public Object delThes(HttpServletRequest request) {
		Map<String, Object> map = new HashMap<String,Object>();
		String tId = ParamUtils.getParameter(request, "id");
		int i = stuEvaService.delThes(tId);
		if(i > 0) {
			map.put("flag","success");
		}else {
			map.put("flag","error");
		}
		return map;
	}
	
	/**
	 * 批量删除设置的评价信息
	 * @param request
	 * @param model
	 * @return
	 * @throws OAServiceException 
	 */
	@RequestMapping(value = "/delAllthes")
	@Role(value = "PJXX_SCPJXX")
	public ModelAndView delAllthes(HttpServletRequest request,ModelAndView model) throws OAServiceException{
		String [] ids = ParamUtils.getParameters(request, "ids");
		stuEvaService.delAllThes(request,ids);
		String resu  = (String)request.getAttribute("Result");
		model.setViewName("redirect:eva/selectTgesPage.ht?resu="+resu);
		return model;
	}
	
	
	/**
	 * 批量删除设置的评价信息
	 * @param request
	 * @param model
	 * @return
	 * @throws OAServiceException 
	 */
	@RequestMapping(value = "/delAllEvaGens")
	@Role(value = "PJXX_SCPJXX")
	public ModelAndView delAllEvaGens(HttpServletRequest request,ModelAndView model) throws OAServiceException{
		String [] ids = ParamUtils.getParameters(request, "ids");
		int i = stuEvaService.delAllEvaGens(ids);
		model.setViewName("redirect:eva/selectListPage.ht");
		return model;
	}
	
	/**
	 * 上线  评价信息
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/goOnline")
	@ResponseBody
	@Role(value = "PJXX_SZPJ")
	public Object goOnline(HttpServletRequest request) {
		Map<String, Object> map = new HashMap<String,Object>();
		String tId = ParamUtils.getParameter(request, "id");
		int i = stuEvaService.goOnline(request,tId);
		if(i > 0) {
			map.put("flag", "success");
		}else {
			map.put("flag", "error");
		}
		return map;
	}
	
	/**
	 * 下线评价信息
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/Offline")
	@ResponseBody
	@Role(value = "PJXX_SZPJ")
	public Object Offline(HttpServletRequest request) {
		Map<String, Object> map = new HashMap<String,Object>();
		String tId = ParamUtils.getParameter(request, "id");
		int i = stuEvaService.Offline(request,tId);
		if(i > 0) {
			map.put("flag", "success");
		}else {
			map.put("flag", "error");
		}
		return map;
	}
	
	
	/**
	 * 删除学生评价信息
	 * @param request
	 * @return
	 * @throws OAServiceException 
	 * @throws UnsupportedEncodingException 
	 */
	@RequestMapping(value = "/delAllEva")
	@Role(value = "PJXX_SCXSPJXX")
	public ModelAndView delAllEva(ModelAndView model,HttpServletRequest request) throws Exception {
		stuEvaService.delAllEva(request);
		return selectStuEvaPage(request);
	}
	
	@RequestMapping(value = "/delAllEvaList")
	@Role(value = "PJXX_SCXSPJXX")
	public ModelAndView delAllEvaList(ModelAndView model,HttpServletRequest request) throws Exception {
		stuEvaService.delAllEva(request);
		return selectStuEvaListPage(request);
	}
	
//	@RequestMapping(value ="/updateState")
//	@Role(value = "PJXX_QDPJ")
//	@ResponseBody
//	public Object updateState(HttpServletRequest request) {
//		Map<String, Object> map = new HashMap<>();
//		String id = ParamUtils.getParameter(request, "id");
//		//int i = stuEvaService.updateState(request);
//		if(i > 0) {
//			map.put("flag", "success");
//		}else {
//			map.put("flag", "error");
//		}
//		return map;
//	}
	
	
	/**
	 * 根据EID查询学生评价信息
	 * @param request
	 * @return
	 */
/*	@RequestMapping(value="/getSidStuEva")
	@ResponseBody
	@Role(value="XSPJ")
	public ModelAndView getEidStuEva(ModelAndView model,HttpServletRequest request) {
		List<BaiseeStuEva> list = stuEvaService.getEidStuEva(request);
		model.addObject("list", list);
		String csName = null ;
		if(list !=null && list.size() > 0) {
			for (BaiseeStuEva baiseeStuEva : list) {
				csName = baiseeStuEva.getClassName();
				break;
			}
		}
		String state = ParamUtils.getParameter(request, "state");
		model.addObject("state", state);
		model.addObject("claName", csName);
		model.setViewName("evaluate/stu_Eva_content");	
		return model;
	}*/
	
	/**
	 * 预览  问题向详细信息
	 * @param request
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/getIdProblemInfo")
	@Role(value = "PJXX")
	public ModelAndView getIdProblemInfo(HttpServletRequest request,ModelAndView model) {
		Problem pro = stuEvaService.getIdProblemInfo(request);
		model.addObject("pro", pro);
		model.setViewName("evaluate/previewQuestionsPage");
		return model;
	}
	
	/**
	 * 生成评价表
	 * @param request
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/saveCreTeb")
	@Role(value="PJXX_TJPJXX")
	@ResponseBody
	public Object saveCreTeb(HttpServletRequest request,ModelAndView model) {
		
		String gid = ParamUtils.getParameter(request, "gID");
		System.err.println(gid);
		Map<String, Object> map = new HashMap<>();
		int i = stuEvaService.saveCreTeb(request);
		if(i > 0) {
			map.put("flag", "success");
		}else {
			map.put("flag", "error");
		}
		return map;
	}
	
	/**
	 * 查询综合评价问题表
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/getIdProblemInfos")
	@Role(value = "PJXX")
	public ModelAndView selectByIdProblem(HttpServletRequest request) {
		ModelAndView model = new ModelAndView();
		List<Problem> list =  stuEvaService.selectByIdProblem(request);
		for (int i = 0; i < list.size(); i++) {
			 String StTitle =(i+1)+"."+list.get(i).getStTitle();
			 list.get(i).setStTitle(StTitle);
		}
		System.out.println(list.size());
		model.addObject("list", list);
		model.setViewName("evaluate/previewQuestionsPages");
		return model;
	}
	
	/**
	 * 校验评价班级
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/validaClaName")
	@Role(ignore=true)
	@ResponseBody
	public Object validaClaName(HttpServletRequest request) {
		EvaGenTeb eva  = stuEvaService.validaClaName(request);
		Map<String, Object> map = new HashMap<>();
		if(eva != null && !"".equals(eva)) {
			map.put("flag", "success");
		}else {
			map.put("flag", "error");
		}
		return map;
	}
 	
	/**
	 * 修改评价问题使用状态
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/updateEvaGenState")
	@Role(value = "PJXX")
	@ResponseBody
	public Object updateEvaGenState(HttpServletRequest request) {
		Map<String, Object> map = new HashMap<>();
		int i = stuEvaService.updateEvaGenState(request);
		if(i > 0) {
			map.put("flag", "success");
		}else {
			map.put("flag", "error");
		}
		return map;		
	}
	
	@RequestMapping(value = "/selectClassEmp")
	@ResponseBody
	@Role(value="PJXX")
	public Object selectClassEmp(HttpServletRequest request) {
		String userType = SessionUtil.getUserInfo(request).getUserType();
		Map<String, Object> map = new HashMap<>();
		map.put("cStatus", userType);   
		map.put("userType", userType); 
		List<BaiseeClazz> list2 = clazzMapper.getCla1(map);  /*查询班级*/
		List<BaiseeUser> empList = userMapper.statusUserType(map);  /*查询员工*/
		Map<String, List<?>> map1 = new HashMap<>();
		map1.put("claList", list2);
		map1.put("empList", empList);
		return map1;
	}
	
	/**
	 * 添加  评价和控制评价
	 * @return
	 */
	@RequestMapping(value = "/saveEvaAndEvaControlTable")
	@ResponseBody
	@Role(value="PJXX")
	public Object saveEvaAndEvaControlTable(HttpServletRequest request) {
		Map<String, Object> map = new HashMap<>();
		int i = stuEvaService.saveEvaAndEvaControlTable(request);
		if(i > 0 ) {
			map.put("flag", "success");
		}
		return map;
	}
	
	/**
	 * 查询所有开启评价的信息
	 * @param pageInfo
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/selectEvaConPage")
	@Role(value = "PJXX")
	public ModelAndView selectEvaConPage(PageInfo<EvaAndControl> pageInfo,HttpServletRequest request) {
		ModelAndView model  = new ModelAndView();
		List<EvaAndControl> list = stuEvaService.selectEvaConPage(request);
		pageInfo = new PageInfo<EvaAndControl>(list);
		model.addObject("pageResult", pageInfo);
		model.setViewName("evaluate/open_eva_List");
		return model;
	}
	
	/**
	 * 根据spid  查询是否有开启的评价信息
	 * @param request
	 * @return
	 * @throws OAServiceException 
	 */
	@RequestMapping("/getEvaCons")
	@ResponseBody
	@Role(value = "PJXX_SCPJXX")
	public Object getEvaCons(HttpServletRequest request) throws OAServiceException {
		Map<String, Object> map = new HashMap<>();
		String ids = ParamUtils.getParameter(request, "ids");
		String suIDs = ParamUtils.getParameter(request, "suID");
		String[] id = ids.split(",");
		String[] suid = suIDs.split(",");
		List<EvaAndControl> list = stuEvaService.getEvaCons(id);
		if(list == null || list.size() == 0 ) {
			stuEvaService.delAllEvaGens(suid);
			map.put("flag", "success");
		}
		return map;
	}
	
	/**
	 * 关闭评价信息
	 * @param request
	 * @return
	 */
	@RequestMapping("/closeEva")
	@ResponseBody
	@Role(value = "PJXX_SCPJXX")
	public Object closeEva(HttpServletRequest request) {
		Map<String, Object> map = new HashMap<>();
		String id = ParamUtils.getParameter(request, "ecId");
		int i = stuEvaService.closeEva(id);
		if(i > 0 ) {
			map.put("flag", "success");
		}
		return map;
	}
	
	@RequestMapping(value = "/validateTitleName")
	@ResponseBody
	@Role(value = "PJXX")
	public Object validateTitleName(HttpServletRequest request) {
			Map<String,Object> map = new HashMap<>();
			String TitleName = ParamUtils.getParameter(request, "TitleName");
			EvaGenTeb eva = stuEvaService.validateTitleName(TitleName);
			if(eva != null && !"".equals(eva)) {
				map.put("flag", "success");
			}
			return map;

	}
	@RequestMapping("stTitleValidate")
	@ResponseBody
	@Role(value="PJXX")
	public Boolean stTitleValidate(String stTitle){
		int validate = stuEvaService.stTitleValidate(stTitle);
		if(validate>0){
			return false;
		}else{
			return true;
		}
		
	}
}
