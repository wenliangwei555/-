package cn.baisee.oa.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import cn.baisee.oa.annotation.Role;
import cn.baisee.oa.model.BaiseeUser;
import cn.baisee.oa.model.IcipBusDict;
import cn.baisee.oa.model.empinfo.Employee;
import cn.baisee.oa.page.pagehelper.PageInfo;
import cn.baisee.oa.service.DictionariesService;
import cn.baisee.oa.service.EmployeeService;
import cn.baisee.oa.utils.ParamUtils;
import cn.baisee.oa.utils.SessionUtil;

/**
 * 字典controller
 *
 * @author sdx
 */
@Controller
@RequestMapping("/dic")
public class DictionariesController {
    @Autowired
    private DictionariesService dictionariesService;
    @Autowired
    private EmployeeService employeeService;
    
    

    /**
     * 去字典添加页面
     *
     * @return
     */
    @RequestMapping("/toAddDic")
    @Role(value = "ZDGL_ZDXZ")
    public ModelAndView toAddDic() {
        ModelAndView mav = new ModelAndView("dictionaries/dic_add");
        mav.addObject("emp", new Employee());
        return mav;
    }

    /**
     * 执行添加字典
     *
     * @param request
     * @param dic
     * @return
     * @throws Exception
     */
    @RequestMapping("/addDic")
    @Role(value = "ZDGL_ZDXZ")
    public ModelAndView addDic(HttpServletRequest request, IcipBusDict dic) throws Exception {
        HttpServletResponse response = null;
        dictionariesService.insertDic(dic);
        return toDicList(request, response);
    }

    /**
     * 查询完所有之后，去首页
     *
     * @param request
     * @param response
     * @return
     * @throws Exception
     */
    @RequestMapping("/toDicList")
    @Role(value = "ZDGL")
    public ModelAndView toDicList(HttpServletRequest request, HttpServletResponse response) throws Exception {
        Integer pageNum = ParamUtils.getPageNumParameters(request);
        Integer pageSize = ParamUtils.getPageSizeParameters(request);
        String itemlableSearch = "";
        if (request.getParameter("itemlableSearch") != null) {
            itemlableSearch = request.getParameter("itemlableSearch");
            request.setAttribute("itemlableSearch", itemlableSearch);
        }
        PageInfo<IcipBusDict> pageInfo = dictionariesService.selectAllDic(pageNum, pageSize, itemlableSearch);
        ModelAndView mv = new ModelAndView("dictionaries/dic_list");
        mv.addObject("pageResult", pageInfo);
        return mv;
    }

    /**
     * 通过id查询所有字典，然后返回修改页面
     *
     * @param request
     * @return
     * @throws Exception
     */
    @RequestMapping("/selectByDicId")
    @Role(value = "ZDGL_ZDXG")
    public ModelAndView selectByDicId(HttpServletRequest request) throws Exception {
        String dictId = request.getParameter("dictId");
        request.getSession().setAttribute("dictid", dictId);
        IcipBusDict ic = dictionariesService.selectDicById(dictId);
        ModelAndView mav = new ModelAndView("dictionaries/dic_update");
        mav.addObject("dict", ic);
        return mav;

    }

    /**
     * 执行修改
     *
     * @param request
     * @param ic
     * @return
     * @throws Exception
     */
    @RequestMapping("/updateDic")
    @Role(value = "ZDGL_ZDXG")
    public ModelAndView updateDic(HttpServletRequest request, IcipBusDict ic) throws Exception {

        dictionariesService.updateDicById(ic);

        return toDicList(request, null);
    }

    /**
     * 批量删除
     *
     * @param request
     * @return
     * @throws Exception
     */
    @RequestMapping("/deleteDic")
    @Role(value = "ZDGL_ZDSC")
    public ModelAndView delDict(HttpServletRequest request) throws Exception {

        String[] dictIds = ParamUtils.getParameters(request, "ids");
        dictionariesService.deleteDic(dictIds);
        return toDicList(request, null);
    }

    /**
     * 校验字典值数据库是否存在
     *
     * @param request
     * @return
     * @throws Exception
     */
    @ResponseBody
    @RequestMapping(value = "/checkDic", method = RequestMethod.POST)
    @Role(ignore = true)
    public Object checkDic(HttpServletRequest request) throws Exception {
        String dictValue = request.getParameter("dictValue");
        IcipBusDict dict = dictionariesService.selectDicByValue(dictValue);
        String dictid = (String) request.getSession().getAttribute("dictid");
        if (dict == null) {
            return true;
        } else {
            if (dict.getDictId().equals(dictid)) {
                return true;
            } else {
                return false;
            }
        }
    }

    /* 部门操作 */

    /**
     * 分页
     *
     * @param request
     * @return laingfeng
     */
    @RequestMapping("departmentList")
    @Role(value = "BMGL_CXBM")
    public String toList(HttpServletRequest request, String itemlableSearch, Model model) {
    	List<IcipBusDict> depats = dictionariesService.selectIcipBusDictByDictName("department");
    	List<IcipBusDict> roles = dictionariesService.selectIcipBusDictByDictName("deptRole");
    	List<Employee> emps = employeeService.selectAllEmployees();
    	List<IcipBusDict> dics = dictionariesService.selectIcipBusDictByDictName("department");
        if (dics != null && dics.size() > 0) {
        	for (IcipBusDict i : dics) {
        		if (i.getDictDestination().contains("学校")) {
        			model.addAttribute("parentId", dics.get(0).getDictId());
        			break;
        		}
        	}
        }
        model.addAttribute("depats", depats);
        model.addAttribute("roles", roles);
        model.addAttribute("emps", emps);
        return "deptRole/department_list";
    }
    /**
     * 下拉部门
     * @param request
     * @return
     * @throws Exception 
     */
    @RequestMapping(value="/select2DeptList")
	@ResponseBody
	@Role(ignore=true)
	public List<IcipBusDict> select2DeptList(HttpServletRequest request) throws Exception{
    	try {
    		Integer pageNum = ParamUtils.getPageNumParameters(request);
    		Integer pageSize = ParamUtils.getPageSizeParameters(request);
    		String itemlableSearch = ParamUtils.getParameter(request, "q");
    		System.out.println(itemlableSearch);
    		String deptkey = "department";
    		PageInfo<IcipBusDict> pageInfo = dictionariesService.findPageByDictName(pageNum, pageSize, deptkey, itemlableSearch);
    		List<IcipBusDict> list = pageInfo.getList();
    		System.out.println(list.size());
    		return pageInfo.getList();
		} catch (Exception e) {
			e.printStackTrace();
			return null;
			// TODO: handle exception
		}
		
	}
    /**
     * 下拉岗位
     * @param request
     * @return
     * @throws Exception 
     */
    @RequestMapping(value="/select2PositionList")
	@ResponseBody
	@Role(ignore=true)
	public List<IcipBusDict> select2PositionList(HttpServletRequest request){
    	try {
    		Integer pageNum = ParamUtils.getPageNumParameters(request);
    		Integer pageSize = ParamUtils.getPageSizeParameters(request);
    		String itemlableSearch = ParamUtils.getParameter(request, "q");
    		System.out.println(itemlableSearch);
    		String deptkey = "empJob";
    		PageInfo<IcipBusDict> pageInfo = dictionariesService.findPageByDictName(pageNum, pageSize, deptkey, itemlableSearch);
    		List<IcipBusDict> list = pageInfo.getList();
    		System.out.println(list.size());
    		return pageInfo.getList();
		} catch (Exception e) {
			e.printStackTrace();
			return null;
			// TODO: handle exception
		}
    	
	}
    /**
     * 跳转部门添加页面
     *
     * @param request
     * @param response
     * @return liangfeng
     */
    @RequestMapping("/toAddDept")
    @Role(value = "BMGL_XZBM")
    public ModelAndView toDeptList(HttpServletRequest request, HttpServletResponse response) {
        ModelAndView model = new ModelAndView();
        List<IcipBusDict> dics = dictionariesService.selectIcipBusDictByDictName("department");
        if (dics != null && dics.size() > 0) {
            model.addObject("parentId", dics.get(0).getDictId());
        }
        model.setViewName("deptRole/department_add");// 设置跳转页面
        return model;
    }

    /**
     * 校验部门名称
     *
     * @param request
     * @param response
     * @return liangfeng
     */
    @ResponseBody
    @RequestMapping("/checkDeptName")
    @Role(value = "BMGL_CXBM")
    public Object checkDeptName(HttpServletRequest request, IcipBusDict dict) {
        Map<String, String> map = new HashMap<>();
        List<IcipBusDict> dicts = dictionariesService.checkDeptName(dict.getDictDestination());
        if (dicts != null && dicts.size() > 0) {
            map.put("codes", "111");
            return map;
        }
        map.put("codes", "000");
        return map;
    }

    /**
     * 添加部门
     *
     * @param request
     * @param response
     * @return liangfeng
     */
    @ResponseBody
    @RequestMapping("/addDept")
    @Role(value = "BMGL_XZBM")
    public Object addDept(HttpServletRequest request, IcipBusDict dict, Model model) {
        dict.setRemark("用于显示部门");
        try {
            dictionariesService.insertDept(dict);
        } catch (Exception e) {
            e.printStackTrace();
        }
        Map<String, String> map = new HashMap<>();
        map.put("codes", "000");
        //return "redirect:dic/departmentList.ht";
        return map;
    }

    /**
     * 删除任务
     *
     * @param request
     * @param ids     数组中装的是列表页面被选中的任务的ID
     * @return
     * @throws Exception liangfeng
     */
    @RequestMapping("/deleteDept")
    @Role(value = "BMGL_SCBM")
    public ModelAndView deleteDept(HttpServletRequest request, String[] ids) throws Exception {
        // ids数组中装的是列表页面被选中任务的ID
        dictionariesService.deleteDic(ids);
        return null;
    }

    /**
     * @param request
     * @return
     * @throws Exception liangfeng
     */
    @RequestMapping("/getById")
    @Role(value = "BMGL_XGBM")
    public ModelAndView getByIds(HttpServletRequest request, String id) throws Exception {
        IcipBusDict dic = dictionariesService.selectDicById(id);
        ModelAndView model = new ModelAndView();
        model.addObject("department", dic);
        model.setViewName("deptRole/department_update");// 设置跳转页面
        return model;
    }

    /**
     * 更新任务
     *
     * @param request
     * @return
     * @throws Exception liangfeng
     */
    @ResponseBody
    @RequestMapping("/updateDept")
    @Role(value = "BMGL_XGBM")
    public Object updateDept(HttpServletRequest request, IcipBusDict dic) throws Exception {
        dictionariesService.update(dic);
        Map<String, String> map = new HashMap<>();
        map.put("codes", "000");
        return map;
    }

    /* 角色操作 */

    /**
     * 分页
     *
     * @param request
     * @return liangfeng
     */
    @RequestMapping("roleList")
    @Role(value = "JSGL")
    public ModelAndView toRoleList(HttpServletRequest request, String itemlableSearch) {
        ModelAndView mv = new ModelAndView("deptRole/role_list");
        int pageNum = ParamUtils.getPageNumParameters(request);
        int pageSize = ParamUtils.getPageSizeParameters(request);
        // 添加查询条件
        Map<String, String> map = new HashMap<>();
        // 添加搜索查询条件
        map.put("itemlableSearch", itemlableSearch == null ? "" : itemlableSearch);
        PageInfo<IcipBusDict> pageInfo = dictionariesService.getRoles(pageNum, pageSize, itemlableSearch);
        mv.addObject("pageResult", pageInfo);
        return mv;
    }

    /**
     * 跳转到添加页面
     *
     * @param request
     * @param response
     * @return liangfeng
     */
    @RequestMapping("/toAddRole")
    @Role(value = "JSGL_XZJS")
    public ModelAndView toAddRole(HttpServletRequest request, HttpServletResponse response) {
        ModelAndView model = new ModelAndView();
        List<IcipBusDict> dics = dictionariesService.selectIcipBusDictByDictName("department");
        model.addObject("departments", dics);
        model.setViewName("deptRole/role_add");// 设置跳转页面
        return model;
    }

    /**
     * 校验名称
     *
     * @param request
     * @param response
     * @return liangfeng
     */
    @ResponseBody
    @RequestMapping("/checkRoleName")
    @Role(value = "JSGL_CXJS")
    public Object checkRoleName(HttpServletRequest request, IcipBusDict dic) {
        Map<String, String> map = new HashMap<>();
        List<IcipBusDict> roles = dictionariesService.checkDeptName(dic.getDictDestination());
        if (roles != null && roles.size() > 0) {
            map.put("codes", "111");
            return map;
        }
        map.put("codes", "000");
        return map;
    }

    /**
     * 添加角色
     *
     * @param request
     * @param response
     * @return liangfeng
     */
    @ResponseBody
    @RequestMapping("/addRole")
    @Role(value = "JSGL_XZJS")
    public Object addRole(HttpServletRequest request, IcipBusDict dic) {
        dic.setRemark("用于显示角色");
        try {
            dictionariesService.insertDic(dic);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        Map<String, String> map = new HashMap<>();
        map.put("codes", "000");
        return map;
    }

    /**
     * 删除任务
     *
     * @param request
     * @param ids     数组中装的是列表页面被选中的任务的ID
     * @return
     * @throws Exception liangfeng
     */
    @RequestMapping("/deleteRole")
    @Role(value = "JSGL_SCJS")
    public ModelAndView deleteRole(HttpServletRequest request, String[] ids) throws Exception {
        // ids数组中装的是列表页面被选中任务的ID
        dictionariesService.deleteDic(ids);
        return toRoleList(request, null);
    }

    /**
     * 查询任务
     *
     * @param request
     * @return
     * @throws Exception
     */
    @RequestMapping("/getRoleById")
    @Role(value = "JSGL_XGJS")
    public ModelAndView getRoleById(HttpServletRequest request, String id) throws Exception {
        IcipBusDict dic = dictionariesService.selectDicById(id);
        List<IcipBusDict> dics = dictionariesService.getDepartmentList();
        ModelAndView model = new ModelAndView();
        model.addObject("departments", dics);
        model.addObject("role", dic);
        model.setViewName("deptRole/role_update");// 设置跳转页面
        return model;
    }

    /**
     * 更新任务
     *
     * @param request
     * @return
     * @throws Exception
     */
    @ResponseBody
    @RequestMapping("/updateRole")
    @Role(value = "JSGL_XZJS")
    public Object updateRole(HttpServletRequest request, IcipBusDict dic) throws Exception {
        dic.setDictId(dic.getDictId().replaceAll(",", ""));
        dictionariesService.update(dic);
        Map<String, String> map = new HashMap<>();
        map.put("codes", "000");
        return map;
    }

    /**
     * 根据部门id查询角色
     *
     * @param request
     * @return
     * @throws Exception liangfeng
     */
    @ResponseBody
    @RequestMapping("/getDpetId")
    @Role(value = "JSGL_XGJS")
    public Object getDpetId(HttpServletRequest request, String dId) throws Exception {
        List<IcipBusDict> dics = dictionariesService.getRoleByDId(dId);
        Map<String, Object> map = new HashMap<>();
        map.put("roles", dics);
        return map;
    }

    /**
     * 根据部门value查询角色
     *
     * @param request
     * @return
     * @throws Exception liangfeng
     */
    @ResponseBody
    @RequestMapping("/getDpetValue")
    @Role(value = "JSGL_CXJS")
    public Object getDpetValue(HttpServletRequest request, String dValue) throws Exception {
        List<IcipBusDict> dics = dictionariesService.getDpetValue(dValue);
        Map<String, Object> map = new HashMap<>();
        map.put("roles", dics);
        return map;
    }

  /** @param request
    * @return
    * @throws Exception liangfeng
    */
   @ResponseBody
   @RequestMapping("/getId")
   @Role(value = "BMGL_XGBM")
   public Object getId(HttpServletRequest request, String id) throws Exception {
       IcipBusDict dic = dictionariesService.selectDicById(id);
       Map<String, IcipBusDict> map = new HashMap<>();
       map.put("dic", dic);
       return map;
   }
}
