package cn.baisee.oa.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import cn.baisee.oa.annotation.Role;
import cn.baisee.oa.constants.AppConstants;
import cn.baisee.oa.constants.ExceptionConstants;
import cn.baisee.oa.exception.OAServiceException;
import cn.baisee.oa.exception.SysRuntimeException;
import cn.baisee.oa.model.BaiseeMenu;
import cn.baisee.oa.model.BaiseeRole;
import cn.baisee.oa.model.BaiseeRoleMenu;
import cn.baisee.oa.model.ReturnInfo;
import cn.baisee.oa.model.SessionUserInfo;
import cn.baisee.oa.page.pagehelper.PageInfo;
import cn.baisee.oa.service.BaiseeRoleService;
import cn.baisee.oa.service.CommSysSequenceService;
import cn.baisee.oa.utils.DateUtil;
import cn.baisee.oa.utils.ParamUtils;
import cn.baisee.oa.utils.SessionUtil;
import cn.baisee.oa.utils.StringUtil;

/**
 * 权限管理
 * @author Administrator
 *
 */
@Controller
@RequestMapping("role")
public class RoleController extends BaseController{

	@Autowired
	private BaiseeRoleService baiseeRoleService;
	// 主键生成service
	@Autowired
	private CommSysSequenceService sequenceService;
		/**
		 * 展示角色信息
		 * @param req
		 * @return
		 * @throws Exception
		 */
		@RequestMapping("/showInfo")
		@Role(ignore = true)
		public ModelAndView toRoleInfo(HttpServletRequest req) throws Exception {
			ModelAndView mav = new ModelAndView("roleinfo/roleInfo");
			String roleId = ParamUtils.getParameter(req, "roleId");
			BaiseeRole roleInfo = new BaiseeRole();
			List<BaiseeRoleMenu> roleMenuInfo = new ArrayList<BaiseeRoleMenu>();
			if (!StringUtil.isEmpty(roleId)) {
				roleInfo = baiseeRoleService.getRoleById(roleId);
				roleMenuInfo = baiseeRoleService.getRoleMenusByRoleId(roleId);
			}
			List<BaiseeMenu> roleMenuTree = null;
			mav.addObject("roleInfo", roleInfo);
			mav.addObject("roleMenuInfo", roleMenuInfo);
			mav.addObject("roleMenuTree", roleMenuTree);
			return mav;
		}

		@ResponseBody
		@RequestMapping({"/roleAdd", "/roleUpd"})
		@Role(ignore=true)
		public Object saveRole(BaiseeRole roleInfo, HttpServletRequest req) throws Exception {
			ReturnInfo rtInfo = getReturnInfo();
			String[] menuIds = ParamUtils.getParameters(req, "menuIds");
			if(menuIds == null || menuIds.length <= 0){
				throw new SysRuntimeException(ExceptionConstants.NULL_POINTER, "关联菜单编号为空");
			}
			roleInfo.setUpdateTime(DateUtil.getNow(DateUtil.DATE_FORMAT_FULL));
	        SessionUserInfo userInfo = SessionUtil.getUserInfo(req);
			if (StringUtil.isEmpty(roleInfo.getRoleId())) {
				roleInfo.setCreateUser(userInfo.getUserId());
				roleInfo.setUpdateUser(userInfo.getUserId());
				roleInfo.setRoleId(sequenceService.nextId("OA"));
				roleInfo.setRoleLevel(AppConstants.ROLE_LEVEL_SIMPLE);
				baiseeRoleService.insertRole(roleInfo, menuIds);
			} else {
				roleInfo.setUpdateUser(userInfo.getUserId());
				baiseeRoleService.updateRole(roleInfo, menuIds);
			}
			rtInfo.setCode(AppConstants.SUCCESS_CODE);
			return rtInfo;
		}
		
	
		@ResponseBody
		@RequestMapping("/isExsit")
		@Role(ignore=true)
		public Object isExsit(HttpServletRequest req, BaiseeRole roleInfo) throws Exception {
			String userId = SessionUtil.getString(req, AppConstants.SESSION_USER_ID);
			return !baiseeRoleService.roleNameCheck(roleInfo, userId);
		}
		/**
		 * 角色列表
		 * @param request
		 * @return
		 */
		@RequestMapping(value="showList")
		@Role(value="QXGL_QXCK")
		public ModelAndView toRoleList(HttpServletRequest request){
			int pageNum=ParamUtils.getPageNumParameters(request);
			int pageSize=ParamUtils.getPageSizeParameters(request);
			String itemlableSearch=ParamUtils.getParameter(request, "itemlableSearch");
			PageInfo<BaiseeRole> info=baiseeRoleService.getRoleList(pageNum, pageSize,itemlableSearch);
			ModelAndView model=new ModelAndView("roleinfo/role_list");
			model.addObject("pageResult", info);
			model.addObject("itemlableSearch", itemlableSearch);
			return model;
		}
		/**
		 * 删除角色
		 * @param request
		 * @return
		 * @throws OAServiceException
		 */
		@RequestMapping(value="delRole")
		@ResponseBody
		@Role(value="QXGL_QXSC")
		public Object delRole(HttpServletRequest request) throws OAServiceException{
			String roleId=ParamUtils.getParameter(request, "roleId");
			Map<String, Object> map=new HashMap<String, Object>();
			boolean result=baiseeRoleService.delRole(roleId);
			if (result==true) {
				map.put("flag", "success");
			}else{
				map.put("flag", "error");
			}
			return map;
		}
		/**
		 * 批量删除
		 * @param request
		 * @return
		 * @throws OAServiceException
		 */
		@RequestMapping(value="delAllRole")
		@Role(value="QXGL_QXSC")
		public ModelAndView delAllRole(HttpServletRequest request) throws OAServiceException{
			String[] roleIds=ParamUtils.getParameters(request, "ids");
			baiseeRoleService.delAllRole(roleIds);
			return toRoleList(request);
		}
}
